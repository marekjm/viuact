(enum option (
    None
    (Some 'a)
))

; (val ('a) print_option ((('a) option)) -> void)
; (let print_option (x) (match x (
;     (with None (print "none"))
;     (with Some x' (print x')))))

(val ('a) print_stuff ('a) -> 'a)
(let print_stuff (x) (print x))

(val print_i8 (i8) -> i8)
(let print_i8 (x) (print x))

(val print_string (string) -> string)
(let print_string (x) (print x))

(val ('a 'b) map (
    (('a) option)
    (('a) -> 'b)
) -> (('b) option))
(let map (x fn) (match x (
    (with None { (print "nothing") (option::None) })
    (with Some x' (option::Some (fn x')))
)))

(exception Foo i8)
(exception Bar)

(val main () -> i8)
(let main () {
    (let n (option::None))
    (let sa (option::Some 42))
    (let si (option::Some 42))
    (let ss (option::Some "Hello, World!"))

    ; (print_option n)
    (map n print_stuff)
    (map sa print_stuff)
    (map si print_i8)
    (map ss print_string)

    (try (throw Foo "Hello, World!") (
        (catch Bar (print 0))
        (catch Foo x (print_i8 x))
    ))

    0
})
