                             VIUACT COMPILER MANUAL
--------------------------------------------------------------------------------

USAGE

The "hello_world.bc" (the "bc" extension is from "bytecode") file name is
derived from the name of the main source file. Inside the build directory (named
"build/_default") you will find several other files:

- hello_world.asm: compiled, assembly language version of the original Viuact
  source of the example program
- hello_world.d: a "dependency specification" for the "hello_world" program;
  this is the file that is read by viuact-opt to automatically discover what it
  needs to link to the main program

After the compilation, you will have four files in total:

- hello_world.lisp
- build/_default/hello_world.asm
- build/_default/hello_world.d
- build/_default/hello_world.bc

--------------------------------------------------------------------------------
COMPILATION OPTIONS

The compiler has no options except "--mode". The assembler-linker driver has
absolutely no options.

Synopsis for the compiler:

    $ viuact-cc --mode ( exec | module ) <file>.lisp

Synopsis for the assembler-linker driver:

    $ viuact-opt <file>.asm

You can affect the compiler and assembler-linker driver through environment
variables.

DEFAULT_OUTPUT_DIRECTORY

Specifies the output directory.

VIUACT_LIBRARY_PATH

Specifies where the compiler and assembler-linker driver should look for
bytecode modules and module interface files. Paths are separated using the ":"
character (as specified by convention used on *NIX systems).

VIUA_ASM_PATH

Specifies the path to the Viua VM assembler executable.

VIUACT_VERBOSE

Enables verbose output if passed as "true" or "yes".

VIUACT_DEBUGGING

Enables debugging output if passed as "true" or "yes".

VIUACT_INFO

Enables informative output if passed as "true" or "yes".

VIUACT_DUMP_INTERMEDIATE

Instructs the compiler to dump intermediate representation images to the output
directory. This produces at most two files:

- `<file>.tokens`: a JSON representation of the token list as seen by the
  compiler
- `<file>.expressions`: a JSON representation of the expression tree as produced
  by the parser

These images are *strictly write-only* from the compiler's point of view. They
may only be output, not consumed by it and are only intended as a debugging aid.

This will produce the ".tokens" file:

    $ VIUACT_DUMP_INTERMEDIATE=tokens viuact-cc hello_world.lisp

This will produce both the ".tokens" and the ".expressions" file:

    $ VIUACT_DUMP_INTERMEDIATE=tokens,exprs viuact-cc hello_world.lisp

--------------------------------------------------------------------------------
COMPILATION PROCESS EXPLAINED

Compilation from Viuact to executable bytecode is split into two stages:

- compilation
- assembly and linkage

Why are assembly and linkage merged into a single stage?

Assembly (turning a sequence of assembly language instructions into a
machine-readable bytecode) and linkage (linking two or more bytecode modules
together while resolving and possibly relocating symbols) are usually two
separate stages Viuact merges them. This is entirely due to the specifics of the
tooling supplied by Viua VM.

To compile a Viuact program two programs are used:

- `viuact-cc.py`: the compiler
- `viuact-opt.py`: the assembler-linker that drives the tooling provided by Viua
  VM

--------------------------------------------------------------------------------

vim:textwidth=80
