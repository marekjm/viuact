                             VIUACT COMPILER MANUAL
--------------------------------------------------------------------------------

Viuact is an almost purely expression-based language, that has features designed
for massive concurrency based on the actor model. It has a Lisp-like syntax and
compiles down to Viua VM assembly.

Viuact's most notable features include:

- actors
- module system
- nested functions
- immutable closures

Actors in Viuact are internally sequential (meaning that every actor executes a
sequential stream of expressions), isolated processes that communicate through
message passing.

Message passing in Viuact is direct (it happens directly between two processes
without any intermediate channels), asynchronous (a message is sent and the
control immediately returns to the running process without receiving an
acknowledgement from the recipient), and comes without any guarantees (meaning
that a reliability-ensuring protocol must be implemented on top of it in "user
space").

In Viuact names are dynamically typed (meaning that a name may be rebound to
values of different types during a single function's execution), and values are
statically typed (every value may be assigned a type during compile time). After
a name is rebound it cannot be used to access the value it held previously, but
the references that appeared before the rebinding all point to the old value (a
prior art example is either OCaml or Rust).

Viuact supplies the programmer with a set of few basic datatypes, on top of
which the programmer may built their custom data structures:

- integer: signed, usually 64 bit wide, but otherwise platform-defined
- float: floating point value, platform-defined but usually a C double
- boolean: boolean type representing either true or false value
- string: a sequence of Unicode codepoints encoded using UTF-8
- struct: a key-value mapping
- vector: a dynamically-sized collection of values, indexed by integers

A special data type is "pid". Pids represent actor IDs and are used as their
addresses during message passing. An actor must have a Pid of another actor to
send it a message.

--------------------------------------------------------------------------------
USAGE

Compilation from Viuact to executable bytecode is split into two stages:

- compilation
- assembly and linkage

Why are assembly and linkage merged into one stage?

Assembly (turning a sequence of assembly language instructions into a
machine-readable bytecode) and linkage (linking two or more bytecode modules
together while resolving and possibly relocating symbols) are usually two
separate stages Viuact merges them. This is entirely due to the specifics of the
tooling supplied by Viua VM.

--------------------------------------------------------------------------------

vim:textwidth=80
