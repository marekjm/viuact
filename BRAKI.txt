Analiza leksykalna i składniowa:

- gdzie w kodzie to jest (pliki itd.)
- opis jak wygląda algorytm parsowania (analizy składniowej)

Emitowanie kodu w języku assemblera:

- porównanie: linijka kodu w Viuact i linijki w asm

Opisanie jak wygląda proces kompilacji: od wczytania pliku Viuact do wyplucia bytecode.
Wyszukanie "smaczków" w implementacji i pokazanie ich, jakieś elementy, które są inne
niż w reszcie kompilatorów.

----

Opisać dlaczego raportowanie błędów jest tylko na etapie asemblacji (czyli ./build/bin/vm/asm).

----

Dostarczyć:

- diagramy przypadków użycia (musi być)
- diagram klas (opcjonalny jeśli dobrze będzie opisana architektura kompilatora)
- manual do tego jak kompilować kod: od Viuact do bytecode

Dopytać dziekana na jakiej podstawie będzie przyznawał ocenę (bo to jest aż 80% całości).

----

Optymalizacja zużycia rejestrów.
Przykład: sklejanie stringów.

1. sklejanie anoninowych stringów: tworzenie mnóstwa anonimowych rejestrów (czyli duże zużycie, O(n²))
2. ręczna optymalizacja: sklejanie do akulmulatora: tworzenie jednego rejestru per sklejenie z anonimową
   warnością zamiast dwóch
3. optymalizacja kompilatorowa: drastyczne zmniejszenie użycie rejestrów

----

Przykłady:

    $ bash ./ex/hello_world.sh make
    $ bash ./ex/simple_message_exchange.sh make
    $ bash ./ex/timeout.sh make
    $ bash ./ex/game.sh make

Program "hello_world" po prostu drukuje "Hello World!".

Program "simple_message_exchange" prezentuje prostą wymianę wiadomości.

Program "timeout" koszysta z I/O, mechanizmów FFI, wymiany wiadomości, timeoutów i
obsługi wyjątków.

Program "game" to gra w zgadywanie liczby. Losuje on liczbę z zakresu od 0 do 100 i
prosi użytkownika o wprowadzenie liczby do momentu aż ten nie zgadnie. Program daje
podpowiedzi czy następna podana liczba powinna być większa czy mniejsza.

Przed uruchomieniem przykładów należy przygotować środowisko:

    $ source ./ex/_env.sh

- czytanie inputu od użytkownika, a w tle asynchronicznie wiadomości pisane na konsolę
  - czytanie liczb i "Daj mi X", użytkownik wpisuje X, to potem "Daj mi Y" (albo zgadywanie)
  - wartości do podania są losowane
