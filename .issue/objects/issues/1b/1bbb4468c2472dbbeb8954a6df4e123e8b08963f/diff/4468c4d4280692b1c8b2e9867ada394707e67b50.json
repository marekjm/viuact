[{"action": "open", "author": {"author.email": "marekjm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1545173575.070706}, {"action": "set-message", "params": {"text": "Specify let binding rules\n\n- scope of let bindings\n- mutability of values bound by let bindings\n- rebinding of names\n- static and local values\n\nAre all register set types Viua provides exposed by Viuact? No, only\nlocal and static register sets are.\n\nHow to create a local let binding?\n\n    (let x 42)\n\nHow to create a static let binding?\n\n    (let static x 42)\n\nLet bindings are by default immutable. This means that the name\nintroduced by a let binding cannot be rebodund (since mutability\nrequires assignment, and assignment is implemented in Viuact via\nrebinding to the same slot).\nTo create a mutable binding, the \"mutable\" keyword must be used:\n\n    (let mutable x 42)\n\nHow to create a mutable static let binding?\n\n    (let mutable static x 42)"}, "author": {"author.email": "marekjm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1545173575.07072}, {"action": "push-tags", "params": {"tags": []}, "author": {"author.email": "marekjm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1545173575.070723}, {"action": "push-milestones", "params": {"milestones": []}, "author": {"author.email": "marekjm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1545173575.070726}]