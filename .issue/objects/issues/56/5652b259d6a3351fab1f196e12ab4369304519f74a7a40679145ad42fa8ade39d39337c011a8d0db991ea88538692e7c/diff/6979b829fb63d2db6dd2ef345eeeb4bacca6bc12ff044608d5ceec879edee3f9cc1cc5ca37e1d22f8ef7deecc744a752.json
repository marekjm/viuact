[{"action": "open", "author": {"author.email": "marejm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1588855890.839913}, {"action": "set-message", "params": {"text": "Implement match expression\n\nIt should take a condition expression to evaluate, compare its result\nwith multiple other values, and evaluate to the result of the expression\nwhose pattern matches the condition value.\n\nThe syntax could look like this (modelled after try expression):\n\n    (match x (\n        (with Example.Foo \"it's a foo\")\n        (with Example.Bar \"it's a bar\")\n        (with _ \"it's something else\")\n    ))\n\nIf the x carries a value (it's a tag enum) then the value could be\nextracted and bound to a name using the following syntax:\n\n    (match x (\n        (with Example.Foo (let x') x')\n        (with Example.Bar (let x') x')\n        (with _ \"it's something else\")\n    ))"}, "author": {"author.email": "marejm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1588855890.83992}, {"action": "push-tags", "params": {"tags": []}, "author": {"author.email": "marejm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1588855890.839923}, {"action": "push-milestones", "params": {"milestones": []}, "author": {"author.email": "marejm@ozro.pw", "author.name": "Marek Marecki"}, "timestamp": 1588855890.839925}]